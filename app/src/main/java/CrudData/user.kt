package CrudData

import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.firebaseauthentication.R
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener

// Changed User data class to use String for id as Firebase keys are strings
data class User(
    var id: String? = null, // Firebase keys are typically strings
    var name: String? = null,
    var email: String? = null
) {
    // Add a no-argument constructor for Firebase deserialization
    constructor() : this(null, null, null)
}

class MainActivity : AppCompatActivity() {
    private lateinit var etUserId: EditText
    private lateinit var etUserName: EditText
    private lateinit var etUserEmail: EditText
    private lateinit var btnRead: Button
    private lateinit var btnCreate: Button
    private lateinit var btnUpdate: Button
    private lateinit var btnDelete: Button

    private lateinit var database: DatabaseReference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main_database)

        etUserId = findViewById(R.id.id)
        etUserName = findViewById(R.id.Name)
        etUserEmail = findViewById(R.id.email)
        btnRead = findViewById(R.id.button3)
        btnCreate = findViewById(R.id.button2)
        btnUpdate = findViewById(R.id.button4)
        btnDelete = findViewById(R.id.button5)

        // Initialize Firebase Database reference to a "users" node
        database = FirebaseDatabase.getInstance().getReference("users")

        btnCreate.setOnClickListener {
            createUser()
        }

        btnRead.setOnClickListener {
            readUser()
        }

        btnUpdate.setOnClickListener {
            updateUser()
        }

        btnDelete.setOnClickListener {
            deleteUser()
        }
    }

    private fun createUser() {
        val name = etUserName.text.toString().trim()
        val email = etUserEmail.text.toString().trim()
        // For Realtime Database, typically the ID is generated by Firebase (push key)
        // or you can use a user-defined ID. Here we use a user-provided ID.
        var userId = etUserId.text.toString().trim()

        if (userId.isEmpty()) {
            // If no ID is provided, generate one using push()
            userId = database.push().key ?: ""
            if (userId.isEmpty()) {
                Toast.makeText(this, "Failed to generate User ID", Toast.LENGTH_SHORT).show()
                return
            }
            etUserId.setText(userId) // Show the generated ID
        }

        if (name.isNotEmpty() && email.isNotEmpty()) {
            val user = User(userId, name, email)
            database.child(userId).setValue(user).addOnCompleteListener {
                if (it.isSuccessful) {
                    Toast.makeText(this, "User created successfully", Toast.LENGTH_SHORT).show()
                    clearEditTexts()
                } else {
                    Toast.makeText(this, "Failed to create user: ${it.exception?.message}", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show()
        }
    }

    private fun readUser() {
        val userId = etUserId.text.toString().trim()
        if (userId.isNotEmpty()) {
            database.child(userId).addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    if (snapshot.exists()) {
                        val user = snapshot.getValue(User::class.java)
                        etUserName.setText(user?.name ?: "")
                        etUserEmail.setText(user?.email ?: "")
                        Toast.makeText(this@MainActivity, "User data loaded", Toast.LENGTH_SHORT).show()
                    } else {
                        Toast.makeText(this@MainActivity, "User ID not found", Toast.LENGTH_SHORT).show()
                        clearEditTextsExceptId()
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Toast.makeText(this@MainActivity, "Failed to read user: ${error.message}", Toast.LENGTH_SHORT).show()
                }
            })
        } else {
            Toast.makeText(this, "Please enter a User ID to read", Toast.LENGTH_SHORT).show()
        }
    }

    private fun updateUser() {
        val userId = etUserId.text.toString().trim()
        val name = etUserName.text.toString().trim()
        val email = etUserEmail.text.toString().trim()

        if (userId.isNotEmpty() && name.isNotEmpty() && email.isNotEmpty()) {
            // It's good practice to update only specific fields or use a map for updates
            // For simplicity, we are overwriting the user object here.
            val user = User(userId, name, email)
            database.child(userId).setValue(user).addOnCompleteListener {
                if (it.isSuccessful) {
                    Toast.makeText(this, "User updated successfully", Toast.LENGTH_SHORT).show()
                    clearEditTexts()
                } else {
                    Toast.makeText(this, "Failed to update user: ${it.exception?.message}", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            Toast.makeText(this, "Please enter User ID and fields to update", Toast.LENGTH_SHORT).show()
        }
    }

    private fun deleteUser() {
        val userId = etUserId.text.toString().trim()
        if (userId.isNotEmpty()) {
            database.child(userId).removeValue().addOnCompleteListener {
                if (it.isSuccessful) {
                    Toast.makeText(this, "User deleted successfully", Toast.LENGTH_SHORT).show()
                    clearEditTexts()
                } else {
                    Toast.makeText(this, "Failed to delete user: ${it.exception?.message}", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            Toast.makeText(this, "Please enter a User ID to delete", Toast.LENGTH_SHORT).show()
        }
    }

    private fun clearEditTexts(){
        etUserId.text.clear()
        etUserName.text.clear()
        etUserEmail.text.clear()
    }

    private fun clearEditTextsExceptId(){
        etUserName.text.clear()
        etUserEmail.text.clear()
    }
}
